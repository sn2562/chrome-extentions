! function(a) {
	var b = {
		setMaskHeight: function() {
			var b, c, d, e = 0,
				f = document,
				g = f.getElementById("main"),
				h = f.getElementById("jsiLocationMask"),
				i = 0;
			b = c = g.offsetHeight + e, a.currentActiveDialogId && (d = f.getElementById(a.currentActiveDialogId), i = d.offsetHeight + window.scrollY), i > b && (c = i), h.style.height = c + "px"
		},
		showMask: function() {
			var b = this,
				c = document,
				d = c.getElementById("jsiLocationMask");
			b.setMaskHeight(), window.scrollY ? d.style.backgroundPosition = "center " + (window.scrollY + 100) + "px" : d.style.backgroundPosition = "center 100px", a.removeClass(d, "hidden")
		}
	};
	a = a || {}, a.locationMask = b
}(window.tnk), _g.loadFailed = {
	defaults: {
		mainBtnText: "読み込みを再開する",
		mainBtnCallback: void 0
	},
	options: {},
	dialog: void 0,
	init: function() {
	var a = this,
	b = document;
	a.dialog = b.getElementById("jsiLoadFailed"), a.setTemplate(), a.setEvents()
},
	setTemplate: function() {
		var a = document;
		_g.TmplUtil.register({
			tmplLoadFailedDialog: a.getElementById("tmplLoadFailedDialog").innerHTML
		})
	},
		setEvents: function() {
			var a = this,
				b = Gk(a.dialog);
			b.on("click", "#jsiLoadFailedMainBtn", function(b) {
				b.preventDefault(), a.options.mainBtnCallback ? a.options.mainBtnCallback() : _g.reload()
			})
		},
			showDialog: function(a) {
				var b = _g.loadFailed;
				b.options = _g.extend(a || {}, b.defaults), b.createDialog(), _g.showDialog("jsiLoadFailed")
			},
				createDialog: function() {
					var a = _g.loadFailed;
					a.dialog.innerHTML = "", a.dialog.appendChild(_g.TmplUtil.render("tmplLoadFailedDialog", a.options))
				}
}, document.addEventListener("DOMContentLoaded", function() {
	_g.loadFailed.init()
}), _g.diceUseReviveItem = {
	defaults: {
		URL_USE_ITEM: "/dice/dice-battle-continue",
		rewards: [],
		diceEventPoint: 0
	},
	options: {},
	useReviveItemDialog: void 0,
	init: function() {
	var a = this,
	b = document;
	a.useReviveItemDialog = b.getElementById("jsiDiceUseReviveItem"), a.setTemplate(), a.setEvents()
},
	setTemplate: function() {
		var a = document;
		_g.TmplUtil.register({
			tmplDiceUseReviveItemDialog: a.getElementById("tmplDiceUseReviveItemDialog").innerHTML
		})
	},
		setEvents: function() {
			var a = this,
				b = Gk(a.useReviveItemDialog);
			b.on("click", ".jscConfirmBtn", function() {
				_g.commonMsg.showDialog({
					titleText: "確認",
					mainText: "命の水を使用しますか？",
					dialogType: "confirm",
					confirmBtnText: "使用する",
					confirmCallback: function() {
						_g.locationMask && _g.locationMask.showMask(), _g.submitData(a.options.URL_USE_ITEM, {
							input: 4
						}, !0)
					},
					closeCallback: function() {
						setTimeout(function() {
							a.showDialog(a.options)
						}, 100)
					}
				})
			}), b.on("click", ".jscCloseBtn", function() {
				_g.diceMapRewardList.showDialog({
					dialogType: "retireConfirm",
					rewards: a.options.rewards,
					diceEventPoint: a.options.diceEventPoint,
					confirmCallback: function() {
						_g.diceUseReviveItem.showDialog({
							rewards: a.options.rewards,
							diceEventPoint: a.options.diceEventPoint
						})
					}
				})
			})
		},
			showDialog: function(a) {
				var b = _g.diceUseReviveItem;
				b.options = _g.extend(a || {}, b.defaults), b.renderUseReviveItem(), _g.showDialog("jsiDiceUseReviveItem")
			},
				renderUseReviveItem: function() {
					var a = _g.diceUseReviveItem;
					a.useReviveItemDialog.innerHTML = "", a.useReviveItemDialog.appendChild(_g.TmplUtil.render("tmplDiceUseReviveItemDialog"), a.options)
				}
}, document.addEventListener("DOMContentLoaded", function() {
	_g.diceUseReviveItem.init()
}), _g.diceMapRewardList = {
	defaults: {
		dialogType: "alert",
		URL_RETIRE: "/dice/dice-battle-continue"
	},
	options: {},
	mapRewardListDialog: void 0,
	init: function() {
	var a = this,
	b = document;
	a.mapRewardListDialog = b.getElementById("jsiDiceMapRewardList"), a.setTemplate(), a.setEvents()
},
	setTemplate: function() {
		var a = document;
		_g.TmplUtil.register({
			tmplDiceMapRewardListDialog: a.getElementById("tmplDiceMapRewardListDialog").innerHTML
		})
	},
		setEvents: function() {
			var a = this,
				b = Gk(a.mapRewardListDialog);
			b.on("click", ".jscConfirmBtn", function(b) {
				b.preventDefault(), a.options.confirmCallback && a.options.confirmCallback()
			}), b.on("click", ".jscCloseBtn", function(b) {
				b.preventDefault(), a.options.closeCallback ? a.options.closeCallback() : "retireConfirm" === a.options.dialogType ? (_g.locationMask && _g.locationMask.showMask(), _g.submitData(a.options.URL_RETIRE, {
					input: 5
				}, !0)) : _g.hideDialog("jsiDiceMapRewardList")
			})
		},
			showDialog: function(a) {
				var b = _g.diceMapRewardList;
				b.options = _g.extend(a || {}, b.defaults), b.renderRewardList(), _g.showDialog("jsiDiceMapRewardList"), _g.getPublisher().trigger(_g.EVENT_DOM_INSERTED)
			},
				renderRewardList: function() {
					var a = _g.diceMapRewardList;
					a.mapRewardListDialog.innerHTML = "", a.mapRewardListDialog.appendChild(_g.TmplUtil.render("tmplDiceMapRewardListDialog", a.options))
				}
}, document.addEventListener("DOMContentLoaded", function() {
	_g.diceMapRewardList.init()
}), _g.diceBattleConsts = {
	EVENT_ANIMATION: "EVENT_ANIMATION",
	EVENT_WAIT_START_END: "EVENT_WAIT_START_END",
	EVENT_DAMAGE_WAVE_END: "EVENT_DAMAGE_WAVE_END",
	EVENT_START_COMMAND_EFFECT: "EVENT_START_COMMAND_EFFECT",
	EVENT_COMPLETE_COMMAND_EFFECT: "EVENT_COMPLETE_COMMAND_EFFECT",
	EVENT_COMMAND_SHUFFLE: "EVENT_COMMAND_SHUFFLE",
	EVENT_COMMAND_ENEMY_DOWN: "EVENT_COMMAND_ENEMY_DOWN",
	EVENT_STATUS_WAVE_END: "EVENT_STATUS_WAVE_END",
	EVENT_CURE_WAVE_END: "EVENT_CURE_WAVE_END",
	EVENT_USER_TURN_END: "EVENT_USER_TURN_END",
	EVENT_ENEMY_TURN_END: "EVENT_ENEMY_TURN_END",
	EVENT_SHOW_DAMAGE: "EVENT_SHOW_DAMAGE",
	EVENT_SHOW_CURE: "EVENT_SHOW_CURE",
	EVENT_USER_SHOW_STATUS: "EVENT_USER_SHOW_STATUS",
	EVENT_COMMAND_LEFT_MOVED: "EVENT_COMMAND_LEFT_MOVED",
	EVENT_SHOW_TEXT: "EVENT_SHOW_TEXT",
	EVENT_RESULT_WIN: "EVENT_RESULT_WIN",
	EVENT_RESULT_LOSE: "EVENT_RESULT_LOSE"
}, _g.diceBattleEffectController = {
	effectTmp: {},
	fps: 12,
	canvasRatio: 1,
	initAnimation: function() {
		var a = _g.diceBattleEffectController,
			b = _g.diceBattle;
		exportRoot = new lib.dicebattleanimation, stage = new createjs.Stage(canvas), stage.clear(), stage.addChild(exportRoot), stage.update(), createjs.Ticker.setFPS(a.fps), createjs.Ticker.addEventListener("tick", stage), a.initParam(), exportRoot.main.frame.enemyRegionLabel.regionName.text = b.battle.enemy.enemyPrefectureName, exportRoot.main.frame.enemyRegionLabel.gotoAndStop("tfc_" + b.battle.enemy.enemyRegionCode), b.battle.enemy.enemyName.length > 11 ? exportRoot.main.frame.enemyName.text = b.battle.enemy.enemyName.substr(0, 11) + ".." : exportRoot.main.frame.enemyName.text = b.battle.enemy.enemyName, exportRoot.main.frame.enemyRareIcon.gotoAndStop("tfc_" + b.battle.enemy.enemyRarity), exportRoot.main.frame.enemyCost.gotoAndStop("tfcCost" + b.battle.enemy.enemyCost), b.status.outcome ? (exportRoot.main.frame.diceContainer.diceAnimation.gotoAndStop("tfcDefault"), 1 == b.battle.user.feverStatus ? (exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDiceFever" + b.status.outcome), exportRoot.main.frame.diceContainer.bgDice.gotoAndStop("tfcBgDiceFever"), exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDiceFever1")) : (exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDice" + b.status.outcome), exportRoot.main.frame.diceContainer.bgDice.bgDiceAnimation.gotoAndPlay("tfcBgDiceIdle")), exportRoot.main.frame.commandAreaModal.gotoAndPlay("tfcStartFadeOut"), exportRoot.main.frame.commandNavi.gotoAndPlay("tfcStartAnimation1")) : (1 == b.battle.user.feverStatus ? (exportRoot.main.frame.diceContainer.bgDice.gotoAndStop("tfcBgDiceFever"), exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDiceFever1")) : exportRoot.main.frame.diceContainer.bgDice.gotoAndStop("tfcBgDiceNormal"), exportRoot.main.frame.diceContainer.diceNavi.gotoAndPlay("tfcStartAnimation1")), 1 == b.battle.user.feverStatus ? exportRoot.main.frame.diceContainer.feverLabel.feverLabelText.text = "ダメージ+" + _g.formatNumber(b.battle.user.feverDamage) : exportRoot.main.frame.diceContainer.feverLabel.visible = !1, a.setHPGauge("user", b.battle.user.userRemainingHitPoint, !1), a.setHPGauge("enemy", b.battle.enemy.enemyRemainingHitPoint, !1), _g.diceBattle.battle.once.userCommands.forEach(function(a, b) {
			exportRoot.main.frame.commandArea["command" + (b + 1)].command.gotoAndStop("tfc_" + a.commandCode)
		}), exportRoot.main.frame.enemyDiceContainer.diceAnimation.gotoAndStop("tfcDefault"), b.status.isTutorial && exportRoot.main.frame.tutorial.gotoAndStop("tfcDiceTutorial"), exportRoot.main.gotoAndStop("tfcWaitScene"), exportRoot.main.waitScene.gotoAndStop("tfcWaitStart"), _g.os.android && _g.removeClass(canvas, "hidden")
	},
	initParam: function() {
		var a = _g.diceBattleEffectController,
			b = _g.diceBattle;
		["userAttackRate", "userDefenceRate"].forEach(function(c) {
			a.effectTmp[c + "X"] = exportRoot.main.frame[c].x, a.setStatusUp(c, b.battle.user[c], !1)
		}), ["enemyAttackRate", "enemyDefenceRate"].forEach(function(c) {
			a.effectTmp[c + "X"] = exportRoot.main.frame[c].x, a.setStatusUp(c, b.battle.enemy[c], !1)
		}), a.effectTmp.userHPGaugeX = exportRoot.main.frame.userHPGauge.hpGaugeContainer.hpGauge.hpGaugeFirst.x, a.effectTmp.enemyHPGaugeX = exportRoot.main.frame.enemyHPGauge.hpGaugeContainer.hpGauge.hpGaugeFirst.x
	},
	handleAnimationEvents: function(a, b) {
		var c = _g.diceBattleEffectController,
			d = _g.diceBattle,
			e = _g.diceBattleConsts;
		switch (a) {
			case e.EVENT_WAIT_START_END:
				exportRoot.main.gotoAndStop("tfcWaitScene"), exportRoot.main.waitScene.gotoAndStop("tfcWaitDefault");
				break;
			case e.EVENT_USER_TURN_END:
				if ("USER_TURN" == d.status.scene) {
					if (("enemy_attack_down" == d.battle.once.userCommandCode || "enemy_defence_down" == d.battle.once.userCommandCode) && !c.effectTmp.enemyDownPreEffect) return c.effectTmp.enemyDownPreEffect = !0, clearTimeout(c.effectTmp.skipTimer), d.status.isSkippable = !1, exportRoot.main.userTurn.gotoAndStop("tfc_" + d.battle.once.userCommandCode), exportRoot.main.userTurn[d.battle.once.userCommandCode].gotoAndPlay(0), void(c.effectTmp.skipTimer = setTimeout(function() {
						d.status.isSkippable = !0
					}, 500));
					exportRoot.main.gotoAndStop("tfcWaitScene"), d.userTurnEnd()
				}
				break;
			case e.EVENT_ENEMY_TURN_END:
				"ENEMY_TURN" == d.status.scene && (exportRoot.main.gotoAndStop("tfcWaitScene"), d.enemyTurnEnd());
				break;
			case e.EVENT_SHOW_DAMAGE:
				c.setDamage(b);
				break;
			case e.EVENT_STATUS_WAVE_END:
				c.setStatusUpAnimationNum(b);
				break;
			case e.EVENT_DAMAGE_WAVE_END:
				c.setDamageAnimationNum(b);
				break;
			case e.EVENT_SHOW_CURE:
				c.setCure(b);
				break;
			case e.EVENT_CURE_WAVE_END:
				c.setCureAnimationNum(b);
				break;
			case e.EVENT_USER_SHOW_STATUS:
				c.showStatusUp(b);
				break;
			case e.EVENT_COMMAND_ENEMY_DOWN:
				c.effectTmp.enemyDownPreEffect || (6 == d.battle.once.userOutcome ? (exportRoot.main.userTurn.gotoAndStop("tfc_user_attack_6"), exportRoot.main.userTurn.user_attack_6.gotoAndPlay(0)) : (exportRoot.main.userTurn.gotoAndStop("tfc_user_attack"), exportRoot.main.userTurn.user_attack.gotoAndPlay(0)));
				break;
			case e.EVENT_START_COMMAND_EFFECT:
				exportRoot.main.frame.effect.commandEffect.x = (7 + 62 * d.status.index) * c.canvasRatio, exportRoot.main.frame.effect.commandEffect.gotoAndPlay("tfcStartAnimation1");
				break;
			case e.EVENT_COMPLETE_COMMAND_EFFECT:
				c.effectTmp.commandEffectComplete = !0;
				break;
			case e.EVENT_COMMAND_LEFT_MOVED:
				d.battle.once.userCommands.length - d.status.index <= ++c.effectTmp.moveLeftCount && (_g.diceBattle.battle.once.userCommands.forEach(function(a, b) {
					exportRoot.main.frame.commandArea["command" + (b + 1)].gotoAndStop("tfcDefault"), exportRoot.main.frame.commandArea["command" + (b + 1)].command.gotoAndStop("tfc_" + a.commandCode)
				}), exportRoot.main.frame.commandArea.command6.gotoAndStop("tfcDefault"));
				break;
			case e.EVENT_COMMAND_SHUFFLE:
				var f = _g.diceBattle.battle.once.userCommands[c.effectTmp.commandShuffleCount].commandCode;
				exportRoot.main.frame.commandArea["command" + (c.effectTmp.commandShuffleCount + 1)].command.gotoAndStop("tfc_" + f), c.effectTmp.commandShuffleCount++;
				break;
			case e.EVENT_RESULT_WIN:
				d.resultWin();
				break;
			case e.EVENT_RESULT_LOSE:
				d.resultLose()
		}
	},
	rollDice: function() {
		var a = _g.diceBattle;
		exportRoot.main.frame.effect.loading.gotoAndPlay("tfcStartAnimation1"), exportRoot.main.frame.diceContainer.diceNavi.gotoAndPlay("tfcStartAnimation2"), _g.pageParams.isTutorial && 1 == a.status.tutorialStep && (a.status.tutorialStep = 2, exportRoot.main.frame.tutorial.gotoAndPlay("tfcLastTutorialHide")), 1 == a.battle.user.feverStatus ? exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndPlay("tfcDiceRollFever") : exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndPlay("tfcDiceRoll"), 0 != exportRoot.main.frame.enemyDiceContainer.timeline.position && (exportRoot.main.frame.enemyDiceContainer.gotoAndPlay("tfcHide"), exportRoot.main.frame.enemyCommandName.gotoAndPlay("tfcHide"))
	},
	stopDice: function() {
		var a = _g.diceBattle;
		exportRoot.main.frame.effect.loading.gotoAndStop("tfcDefault"), exportRoot.main.frame.diceContainer.diceAnimation.gotoAndPlay("tfcStartAnimation2"), 1 == a.battle.user.feverStatus ? exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDiceFever" + a.status.outcome) : exportRoot.main.frame.diceContainer.diceAnimation.dice.gotoAndStop("tfcDice" + a.status.outcome), exportRoot.main.frame.diceContainer.bgDice.bgDiceAnimation.gotoAndPlay("tfcBgDiceIdle"), exportRoot.main.frame.commandAreaModal.gotoAndPlay("tfcStartFadeOut"), exportRoot.main.frame.commandNavi.gotoAndPlay("tfcStartAnimation1"), a.status.isTutorial && createjs.Tween.get(exportRoot.main.frame.tutorial).wait(700).call(function() {
			this.gotoAndPlay("tfcDiceTutorial")
		})
	},
	selectCommand: function() {
		var a = _g.diceBattleEffectController,
			b = _g.diceBattle;
		exportRoot.main.frame.effect.loading.gotoAndPlay("tfcStartAnimation1"), exportRoot.main.frame.commandAreaModal.gotoAndStop("tfcTransparence"), exportRoot.main.frame.commandNavi.gotoAndStop("tfcDefault"), a.effectTmp.commandEffectComplete = !1, exportRoot.main.frame.commandArea["command" + (b.status.index + 1)].gotoAndPlay("tfcSelect"), _g.pageParams.isTutorial && 0 == b.status.tutorialStep && createjs.Tween.get(exportRoot.main.frame.tutorial).wait(700).call(function() {
			this.gotoAndPlay("tfcCommandTutorial")
		})
	},
	userTurnStart: function() {
		var a, b, c = _g.diceBattleEffectController,
			d = _g.diceBattle;
		if (exportRoot.main.frame.effect.loading.gotoAndStop("tfcDefault"), exportRoot.main.frame.diceContainer.gotoAndPlay("tfcStartAnimation1"), c.effectTmp.moveLeftCount = 0, c.effectTmp.enemyDownPreEffect = !1, c.effectTmp.startShowStatusUp = !1, exportRoot.main.gotoAndStop("tfcUserTurn"), "user_attack" == d.battle.once.userCommandCode && 6 == d.battle.once.userOutcome ? (exportRoot.main.userTurn.gotoAndStop("tfc_" + d.battle.once.userCommandCode + "_6"), exportRoot.main.userTurn[d.battle.once.userCommandCode + "_6"].gotoAndPlay(0)) : (exportRoot.main.userTurn.gotoAndStop("tfc_" + d.battle.once.userCommandCode), exportRoot.main.userTurn[d.battle.once.userCommandCode].gotoAndPlay(0)), "user_shuffle" !== d.battle.once.userCommandCode)
			for (exportRoot.main.frame.commandArea.command6.command.gotoAndStop("tfc_" + d.battle.once.userCommands[d.battle.once.userCommands.length - 1].commandCode), a = d.status.index + 1; a <= d.battle.once.userCommands.length; a++) exportRoot.main.frame.commandArea["command" + (a + 1)].gotoAndPlay("tfcMoveLeft");
		else b = _g.diceBattle.battle.once.userCommands[d.status.index].commandCode, exportRoot.main.frame.commandArea["command" + (d.status.index + 1)].command.gotoAndStop("tfc_" + b), c.effectTmp.commandShuffleCount = 0;
		clearTimeout(c.effectTmp.skipTimer), c.effectTmp.skipTimer = setTimeout(function() {
			d.status.isSkippable = !0
		}, 500)
	},
	enemyTurnStart: function() {
		var a = _g.diceBattleEffectController,
			b = _g.diceBattle;
		exportRoot.main.frame.enemyDiceContainer.diceAnimation.dice.gotoAndPlay("tfcDiceRoll"), exportRoot.main.frame.enemyDiceContainer.gotoAndPlay("tfcShow"), setTimeout(function() {
			exportRoot.main.frame.enemyDiceContainer.diceAnimation.gotoAndPlay("tfcStartAnimation2"), exportRoot.main.frame.enemyDiceContainer.diceAnimation.dice.gotoAndStop("tfcDice" + b.battle.once.enemyOutcome), exportRoot.main.frame.enemyCommandName.gotoAndStop("tfcInit"), exportRoot.main.frame.enemyCommandName.text.enemyCommandName.text = b.battle.once.enemyCommandName, exportRoot.main.frame.enemyCommandName.gotoAndPlay("tfcShow"), setTimeout(function() {
				exportRoot.main.gotoAndStop("tfcEnemyTurn"), a.effectTmp.startShowStatusUp = !1, "enemy_attack" == b.battle.once.enemyCommandCode && 6 == b.battle.once.enemyOutcome ? (exportRoot.main.enemyTurn.gotoAndStop("tfc_" + b.battle.once.enemyCommandCode + "_6"), exportRoot.main.enemyTurn[b.battle.once.enemyCommandCode + "_6"].gotoAndPlay(0)) : (exportRoot.main.enemyTurn.gotoAndStop("tfc_" + b.battle.once.enemyCommandCode), exportRoot.main.enemyTurn[b.battle.once.enemyCommandCode].gotoAndPlay(0)), clearTimeout(a.effectTmp.skipTimer), a.effectTmp.skipTimer = setTimeout(function() {
					b.status.isSkippable = !0
				}, 500)
			}, 100)
		}, 300)
	},
	enemyTurnEnd: function() {
		var a = _g.diceBattle;
		exportRoot.main.frame.commandAreaModal.gotoAndPlay("tfcStartFadeIn"), _g.pageParams.isTutorial && 0 == a.status.tutorialStep && (a.status.tutorialStep = 1, createjs.Tween.get(exportRoot.main.frame.tutorial).wait(200).call(function() {
			this.gotoAndPlay("tfcLastTutorialShow")
		})), exportRoot.main.frame.diceContainer.gotoAndStop("tfcInit"), 1 == a.battle.user.feverStatus ? exportRoot.main.frame.diceContainer.bgDice.gotoAndStop("tfcBgDiceFever") : exportRoot.main.frame.diceContainer.bgDice.gotoAndStop("tfcBgDiceNormal"), exportRoot.main.frame.diceContainer.diceAnimation.gotoAndPlay("tfcDiceAnimationHop"), exportRoot.main.frame.diceContainer.bgDice.bgDiceAnimation.gotoAndPlay("tfcBgDiceActive"), exportRoot.main.frame.diceContainer.diceNavi.gotoAndPlay("tfcStartAnimation1"), exportRoot.main.frame.diceContainer.gotoAndPlay("tfcStartAnimation2")
	},
	checkStatusChange: function() {
		var a = _g.diceBattleEffectController,
			b = _g.diceBattle,
			c = _g.diceBattleConsts,
			d = "USER_TURN" == b.status.scene ? b.battle.once.userCommandCode : b.battle.once.enemyCommandCode;
		if (("user_attack_up" == d || "user_defence_up" == d || "enemy_attack_down" == d || "enemy_defence_down" == d) && !a.effectTmp.startShowStatusUp) switch (a.effectTmp.startShowStatusUp = !0, d) {
			case "user_attack_up":
				_g.getPublisher().trigger(c.EVENT_ANIMATION, c.EVENT_USER_SHOW_STATUS, {
					target: "userAttackRate"
				});
				break;
			case "user_defence_up":
				_g.getPublisher().trigger(c.EVENT_ANIMATION, c.EVENT_USER_SHOW_STATUS, {
					target: "userDefenceRate"
				});
				break;
			case "enemy_attack_up":
			case "enemy_attack_down":
				_g.getPublisher().trigger(c.EVENT_ANIMATION, c.EVENT_USER_SHOW_STATUS, {
					target: "enemyAttackRate"
				});
				break;
			case "enemy_defence_up":
			case "enemy_defence_down":
				_g.getPublisher().trigger(c.EVENT_ANIMATION, c.EVENT_USER_SHOW_STATUS, {
					target: "enemyDefenceRate"
				});
				break;
			default:
				return
		}
	},
	showStatusUp: function(a) {
		var b, c, d = _g.diceBattleEffectController,
			e = _g.diceBattle;
		switch (d.effectTmp.startShowStatusUp = !0, b = a.target) {
			case "userAttackRate":
				c = "USER_TURN" === e.status.scene ? e.battle.user[b] - e.battle.once.onceUserAttackDownRate : e.battle.user[b];
				break;
			case "userDefenceRate":
				c = "USER_TURN" === e.status.scene ? e.battle.user[b] - e.battle.once.onceUserDefenceDownRate : e.battle.user[b];
				break;
			case "enemyAttackRate":
				c = "USER_TURN" === e.status.scene ? e.battle.enemy[b] - e.battle.once.onceEnemyAttackUpRate : e.battle.enemy[b];
				break;
			case "enemyDefenceRate":
				c = "USER_TURN" === e.status.scene ? e.battle.enemy[b] - e.battle.once.onceEnemyDefenceUpRate : e.battle.enemy[b];
				break;
			default:
				return
		}
		d.setStatusUp(b, c, !0)
	},
	setStatusUp: function(a, b, c) {
		var d, e, f, g = _g.diceBattleEffectController;
		for (d = -1 != a.indexOf("Attack") ? b >= 0 ? "Yellow" : "Red" : b >= 0 ? "Blue" : "Red", e = Math.abs(b) + "", g.effectTmp[a] = {
			count: 0,
			goal: e,
			color: d,
			target: exportRoot.main.frame[a]
		}, g.effectTmp[a].target.symbol.gotoAndStop("tfcNumber" + d), g.effectTmp[a].target.symbol["number" + d].gotoAndStop("tfcNumber" + (b >= 0 ? "Plus" : "Minus")), f = 1; 4 >= f; f++) g.effectTmp[a].target["digit" + f].gotoAndStop("tfcNumber" + d), g.effectTmp[a].target["digit" + f].visible = f <= e.length + 1 ? !0 : !1, !c && f <= e.length + 1 ? g.effectTmp[a].target["digit" + f]["number" + d].gotoAndStop("tfcNumber" + e[f - 1]) : g.effectTmp[a].target["digit" + f]["number" + d].gotoAndPlay("tfcNumber" + Math.floor(9 * Math.random() + 1));
		g.effectTmp[a].target["digit" + (e.length + 1)]["number" + d].gotoAndStop("tfcNumberPercent"), -1 != a.indexOf("user") ? g.effectTmp[a].target.x = g.effectTmp[a + "X"] + (10 * (3 - e.length) + 10) * g.canvasRatio : g.effectTmp[a].target.x = g.effectTmp[a + "X"] + (5 * (3 - e.length) + 0) * g.canvasRatio, c ? (exportRoot.main.frame[a + "Aura"] && exportRoot.main.frame[a + "Aura"].gotoAndPlay("tfcStartAnimation1"), exportRoot.main.frame.effect[a + "Kira"] && exportRoot.main.frame.effect[a + "Kira"].kira.gotoAndPlay("tfcStartAnimation1"), g.effectTmp[a].target.gotoAndPlay("tfcStartAnimation1")) : g.effectTmp[a].target.gotoAndStop("tfcDefault")
	},
	setStatusUpAnimationNum: function(a) {
		var b, c = _g.diceBattleEffectController;
		switch (a.self.id) {
			case a.self.parent.userAttackRate.id:
				b = c.effectTmp.userAttackRate;
				break;
			case a.self.parent.userDefenceRate.id:
				b = c.effectTmp.userDefenceRate;
				break;
			case a.self.parent.enemyAttackRate.id:
				b = c.effectTmp.enemyAttackRate;
				break;
			case a.self.parent.enemyDefenceRate.id:
				b = c.effectTmp.enemyDefenceRate;
				break;
			default:
				return
		}
		b.count < b.goal.length && b.target["digit" + (b.count + 1)]["number" + b.color].gotoAndStop("tfcNumber" + b.goal[b.count]), b.count++
	},
	setDamage: function(a) {
		var b, c, d, e, f, g = _g.diceBattleEffectController,
			h = _g.diceBattle,
			i = "Red",
			j = !1;
		for (!a.isUsers && "advantage" != a.damageType && h.battle.once.onceAttackBoostDamage > 0 && (j = !0, setTimeout(function() {
			g.setDamage({
				isUsers: !1,
				damageType: "advantage",
				attackType: a.attackType,
				attackTimes: a.attackTimes
			})
		}, 100)), "advantage" == a.damageType ? (i = "Orange", b = "enemyAdvantageDamage", "attackDouble" == a.attackType ? (f = h.battle.once.onceAttackBoostDamage, 1 == a.attackTimes ? (e = g.effectTmp.enemyDamage.attackRate, c = Math.floor(f * e) + "") : c = f - parseInt(g.effectTmp[b].goal, 10) + "") : c = h.battle.once.onceAttackBoostDamage + "") : (i = "Red", b = a.isUsers ? "userDamage" : "enemyDamage", "attackDouble" == a.attackType ? (f = a.isUsers ? h.battle.once.onceUserDamage : h.battle.once.onceEnemyDamage, 1 == a.attackTimes ? (e = g.getRandomArbitary(.4, .6), c = Math.floor(f * e) + "") : c = f - parseInt(g.effectTmp[b].goal, 10) + "") : c = a.isUsers ? h.battle.once.onceUserDamage + "" : h.battle.once.onceEnemyDamage + ""), g.effectTmp[b] = {
			count: 0,
			goal: c,
			color: i,
			type: a.damageType || "base",
			isUsers: a.isUsers,
			target: exportRoot.main.frame.effect[b],
			attackType: a.attackType,
			attackTimes: a.attackTimes,
			attackRate: e
		}, g.effectTmp[b].target.gotoAndStop("tfcInit"), "advantage" !== a.damageType && (g.effectTmp[b].target.symbol.visible = "0" !== c ? !0 : !1, g.effectTmp[b].target.symbol.gotoAndStop("tfcNumber" + i), g.effectTmp[b].target.symbol["number" + i].gotoAndStop("tfcNumberMinus")), d = 1; 10 >= d; d++) g.effectTmp[b].target["digit" + d].gotoAndStop("tfcNumber" + i), g.effectTmp[b].target["digit" + d].visible = d <= c.length ? !0 : !1, "0" !== c ? g.effectTmp[b].target["digit" + d]["number" + i].gotoAndPlay("tfcNumber" + Math.floor(9 * Math.random() + 1)) : g.effectTmp[b].target["digit" + d]["number" + i].gotoAndStop("tfcNumber0");
		"advantage" == a.damageType ? g.effectTmp[b].target.x = (10 * (10 - c.length) + 80) * g.canvasRatio : a.isUsers ? g.effectTmp[b].target.x = (10 * (10 - c.length) + 60) * g.canvasRatio : (g.effectTmp[b].target.x = (12 * (10 - c.length) + 10) * g.canvasRatio, g.effectTmp[b].target.y = (j ? 174 : 180) * g.canvasRatio), "0" !== c ? g.effectTmp[b].target.gotoAndPlay("tfcStartAnimation1") : g.effectTmp[b].target.gotoAndPlay("tfcStartAnimation2")
	},
	setDamageAnimationNum: function(a) {
		var b, c, d = _g.diceBattleEffectController,
			e = _g.diceBattle;
		switch (a.self.id) {
			case a.self.parent.userDamage.id:
				b = d.effectTmp.userDamage;
				break;
			case a.self.parent.enemyDamage.id:
				b = d.effectTmp.enemyDamage;
				break;
			case a.self.parent.enemyAdvantageDamage.id:
				b = d.effectTmp.enemyAdvantageDamage;
				break;
			default:
				return
		}
		b.count < b.goal.length ? b.target["digit" + (b.count + 1)]["number" + b.color].gotoAndStop("tfcNumber" + b.goal[b.count]) : b.count != b.goal.length || b.isUsers || "base" != b.type || (c = "attackDouble" == b.attackType && 1 == b.attackTimes ? 1 : 500, setTimeout(function() {
			exportRoot.main.frame.effect.enemyDamage.gotoAndPlay("tfcHideNumber"), e.battle.once.onceAttackBoostDamage > 0 && exportRoot.main.frame.effect.enemyAdvantageDamage.gotoAndPlay("tfcHideNumber"), "attackDouble" == b.attackType && 1 == b.attackTimes ? exportRoot.main.userTurn.user_attack_double.gotoAndPlay("tfcScene2") : _g.getPublisher().trigger(_g.diceBattleConsts.EVENT_ANIMATION, _g.diceBattleConsts.EVENT_USER_TURN_END)
		}, c)), b.count++
	},
	setCure: function(a) {
		var b, c, d, e, f = _g.diceBattleEffectController,
			g = _g.diceBattle;
		for (d = "Green", b = a.isUsers ? "userCure" : "enemyCure", c = a.isUsers ? g.battle.once.onceUserCure + "" : g.battle.once.onceEnemyCure + "", f.effectTmp[b] = {
			count: 0,
			goal: c,
			color: d,
			isUsers: a.isUsers,
			target: exportRoot.main.frame.effect[b]
		}, f.effectTmp[b].target.gotoAndStop("tfcInit"), f.effectTmp[b].target.symbol.gotoAndStop("tfcNumber" + d), f.effectTmp[b].target.symbol["number" + d].gotoAndStop("tfcNumberPlus"), e = 1; 10 >= e; e++) f.effectTmp[b].target["digit" + e].gotoAndStop("tfcNumber" + d), f.effectTmp[b].target["digit" + e].visible = e <= c.length ? !0 : !1, f.effectTmp[b].target["digit" + e]["number" + d].gotoAndPlay("tfcNumber" + Math.floor(9 * Math.random() + 1));
		a.isUsers ? f.effectTmp[b].target.x = (10 * (10 - c.length) + 60) * f.canvasRatio : f.effectTmp[b].target.x = (12 * (10 - c.length) + 10) * f.canvasRatio, f.effectTmp[b].target.gotoAndPlay("tfcStartAnimation1")
	},
	setCureAnimationNum: function(a) {
		var b, c = _g.diceBattleEffectController;
		switch (a.self.id) {
			case a.self.parent.userCure.id:
				b = c.effectTmp.userCure;
				break;
			case a.self.parent.enemyCure.id:
				b = c.effectTmp.enemyCure;
				break;
			default:
				return
		}
		b.count < b.goal.length && b.target["digit" + (b.count + 1)]["number" + b.color].gotoAndStop("tfcNumber" + b.goal[b.count]), b.count++
	},
	getDivisionHP: function(a, b) {
		var c, d, e, f, g, h = 3,
			i = b / h;
		return a > b ? a = b : 0 > a && (a = 0), c = a - i, c > 0 ? (g = i, d = c - i, d > 0 ? (f = i, e = d) : (f = c, e = 0)) : (e = 0, f = 0, g = a), [e / i, f / i, g / i]
	},
	setHPGauge: function(a, b, c, d) {
		var e, f, g, h, i, j, k, l = _g.diceBattleEffectController,
			m = _g.diceBattle,
			d = d || function() {};
		for (e = exportRoot.main.frame[a + "HPGauge"].hpGaugeContainer.hpGauge, f = l.getDivisionHP(b, m.battle[a][a + "MaxHitPoint"]), j = 0, k = f.length; k > j; j++) 0 === f[j] && (f[j] = -.01);
		g = l.effectTmp[a + "HPGaugeX"], c ? (h = e.hpGaugeFirst.x + e.hpGaugeSecond.x + e.hpGaugeThird.x, i = 2 * g * (f[0] + f[1] + f[2]) - 3 * g, i > h ? (createjs.Tween.get(e.hpGaugeThird).wait(0).to({
			x: Math.round(2 * g * f[2] - g)
		}, 500, createjs.Ease.circOut), createjs.Tween.get(e.hpGaugeSecond).wait(250).to({
			x: Math.round(2 * g * f[1] - g)
		}, 500, createjs.Ease.circOut), createjs.Tween.get(e.hpGaugeFirst).wait(500).to({
			x: Math.round(2 * g * f[0] - g)
		}, 500, createjs.Ease.circOut).call(d)) : (createjs.Tween.get(e.hpGaugeFirst).wait(0).to({
			x: Math.round(2 * g * f[0] - g)
		}, 500, createjs.Ease.circOut), createjs.Tween.get(e.hpGaugeSecond).wait(250).to({
			x: Math.round(2 * g * f[1] - g)
		}, 500, createjs.Ease.circOut), createjs.Tween.get(e.hpGaugeThird).wait(500).to({
			x: Math.round(2 * g * f[2] - g)
		}, 500, createjs.Ease.circOut).call(d))) : (e.hpGaugeFirst.x = Math.round(2 * g * f[0] - g), e.hpGaugeSecond.x = Math.round(2 * g * f[1] - g), e.hpGaugeThird.x = Math.round(2 * g * f[2] - g))
	},
	getRandomArbitary: function(a, b) {
		return Math.random() * (b - a) + a
	}
}, _g.diceBattle = {
	settings: {},
	status: {
		index: -1,
		outcome: 0,
		scene: "WAIT",
		loadError: !1,
		tutorialStep: 0,
		isDisabled: !1,
		isSkippable: !1
	},
	battle: {},
	prevBattle: {},
	effector: _g.diceBattleEffectController,
	messageIndex: -1,
	init: function() {
		var a = this;
		a.initParam(), a.initTemplate(), a.setEvents(), a.initCanvas(), a.renderStatusDetail(), 2 == a.battle.user.resultType && a.resultLose()
	},
	initParam: function() {
		var a = this,
			b = document;
		a.battle = _g.pageParams.diceBattleDto, a.prevBattle = a.battle, a.battle.once.userOutcome && (a.status.scene = "SELECT_DICE", a.status.outcome = a.battle.once.userOutcome, _g.addClass(b.getElementById("jsiEscape"), "is-btn-disable"))
	},
	initTemplate: function() {
		var a = document;
		_g.TmplUtil.addTemplate({
			tmplStatusDetail: a.getElementById("tmplStatusDetail").innerHTML
		})
	},
	setEvents: function() {
		var a = this,
			b = _g.getObserver(),
			c = _g.getPublisher(),
			d = _g.getGkDocument();
		d.on("click", "#jsiDice", a.selectDice), d.on("touchstart", "#jsiDice", a.selectDice), d.on("click", ".jscCommand", a.selectCommand), d.on("touchstart", ".jscCommand", a.selectCommand), d.on("click", "#jsiEscape", a.showEscapeDialog), d.on("click", "#jsiCanvasLoading", a.setLoadingText), d.on("click", "#jsiCanvasArea", a.skipAnimation), b.listenTo(c, _g.diceBattleConsts.EVENT_ANIMATION, a.effector.handleAnimationEvents)
	},
	initCanvas: function() {
		var a, b = _g.diceBattle,
			c = document,
			d = [],
			e = new createjs.LoadQueue(!1);
		a = b.getOSVersion(), _g.os.ios && a >= 6 || !_g.os.isAndroidApp && _g.os.android && a >= 4.2 ? b.effector.canvasRatio = 2 : b.effector.canvasRatio = 1, canvas = c.getElementById("jsiBossBattleCanvas"), images = images || {}, _g.os.android && _g.addClass(canvas, "hidden"), canvas.width *= b.effector.canvasRatio, canvas.height *= b.effector.canvasRatio, createjs.LoadQueue.LOAD_TIMEOUT = 9e4, e.setMaxConnections(5), e.maintainScriptOrder = !1, e.addEventListener("fileload", function(a) {
			"image" == a.item.type && (images[a.item.id] = a.result)
		}), e.addEventListener("complete", b.initAnimation), e.addEventListener("error", function() {
			b.status.loadError = !0
		}), d = 2 == b.effector.canvasRatio ? [{
			src: "/js/event/dice/battle/dice-battle-animation-ratio20.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: "/js/event/dice/battle/dice-battle-animation-img-1-ratio20.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: "/js/event/dice/battle/dice-battle-animation-img-2-ratio20.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: _g.imageServerPath + "/ratio20" + b.battle.enemy.enemyImagePath + "?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			id: "boss",
			type: createjs.LoadQueue.IMAGE
		}] : [{
			src: "/js/event/dice/battle/dice-battle-animation.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: "/js/event/dice/battle/dice-battle-animation-img-1.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: "/js/event/dice/battle/dice-battle-animation-img-2.min.js?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			type: createjs.LoadQueue.JAVASCRIPT
		}, {
			src: _g.imageServerPath + "/ratio10" + b.battle.enemy.enemyImagePath + "?tnkStaticVersion=" + _g.pageParams.tnkStaticVersion,
			id: "boss",
			type: createjs.LoadQueue.IMAGE
		}], e.loadManifest(d)
	},
	initAnimation: function() {
		var a = _g.diceBattle,
			b = document,
			c = b.getElementById("jsiCanvasLoading");
		return a.status.loadError ? (_g.ga.pushEvent("js_log", "tfc_dice_battle", "load_failed"), _g.addClass(c, "hidden"), void _g.loadFailed.showDialog()) : (a.effector.initAnimation(), void setTimeout(function() {
			c.style.opacity = 0, setTimeout(function() {
				_g.addClass(c, "hidden")
			}, 500)
		}, 300))
	},
	getOSVersion: function() {
		var a, b;
		return a = function() {
			return parseFloat(_g.os.ua.substr(_g.os.ua.indexOf("Android") + 8, 3))
		}, b = function() {
			var a = _g.os.ua.match(/OS (\d+)_(\d+)/);
			return parseFloat(a[1] + "." + a[2])
		}, _g.os.android ? a() : _g.os.ios ? b() : 0
	},
	selectDice: function(a) {
		var b = _g.diceBattle,
			c = document;
		b.status.outcome || b.status.isDisabled || (a.preventDefault(), _g.addClass(c.getElementById("jsiEscape"), "is-btn-disable"), b.status.scene = "SELECT_DICE", b.status.isDisabled = !0, b.effector.rollDice(), _g.ajaxJSON(_g.pageParams.URL_GET_OUTCOME, {
			hideAjaxMask: !0,
			isUpdate: !0
		}).done(function(a) {
			setTimeout(function() {
				b.status.outcome = a.data.outcome, b.effector.stopDice(), b.status.isDisabled = !1
			}, 100)
		}).fail(function() {
			_g.loadFailed.showDialog()
		}))
	},
	selectCommand: function(a) {
		var b = _g.diceBattle,
			c = this;
		0 == b.status.outcome || -1 != b.status.index || b.status.isDisabled || (a.preventDefault(), b.status.scene = "SELECT_COMMAND", b.status.index = c.getAttribute("data-command-index") - 0, b.effector.selectCommand(), _g.ajaxJSON(_g.pageParams.URL_GET_BATTLE_DATA, {
			hideAjaxMask: !0,
			isUpdate: !0,
			data: {
				"input.index": b.status.index + 1,
				"input.commandId": b.battle.once.userCommands[b.status.index].commandId,
				"input.outcome": b.status.outcome
			}
		}).done(b.userTurnStart).fail(function() {
			_g.loadFailed.showDialog()
		}))
	},
	userTurnStart: function(a) {
		var b = _g.diceBattle;
		return b.effector.effectTmp.commandEffectComplete ? (b.status.scene = "USER_TURN", b.prevBattle = b.battle, b.battle = a.data, void b.effector.userTurnStart()) : void setTimeout(function() {
			b.userTurnStart(a)
		}, 100)
	},
	userTurnEnd: function() {
		var a = _g.diceBattle;
		return a.status.isSkippable = !1, a.effector.setHPGauge("user", a.prevBattle.user.userRemainingHitPoint + a.battle.once.onceUserCure, !0), a.effector.setHPGauge("enemy", a.prevBattle.enemy.enemyRemainingHitPoint - a.battle.once.onceEnemyDamage, !0, function() {
			1 == a.battle.user.resultType && (exportRoot.main.gotoAndStop("tfcResultScene"), exportRoot.main.resultScene.gotoAndStop("tfcResultWin"), exportRoot.main.resultScene.resultWin.gotoAndPlay(0))
		}), a.effector.checkStatusChange(), 1 == a.battle.user.resultType ? void(a.status.scene = "RESULT") : void(a.battle.once.enemyTurnSkip ? a.enemyTurnEnd() : a.enemyTurnStart())
	},
	enemyTurnStart: function() {
		var a = _g.diceBattle;
		a.status.scene = "ENEMY_TURN", a.effector.enemyTurnStart()
	},
	enemyTurnEnd: function() {
		var a = _g.diceBattle,
			b = document;
		return a.status.scene = "WAIT", a.status.isSkippable = !1, a.effector.setHPGauge("user", a.battle.user.userRemainingHitPoint, !0, function() {
			2 == a.battle.user.resultType && (exportRoot.main.gotoAndStop("tfcResultScene"), exportRoot.main.resultScene.gotoAndStop("tfcResultLose"),
											  exportRoot.main.resultScene.resultLose.gotoAndPlay(0))
		}), a.effector.setHPGauge("enemy", a.battle.enemy.enemyRemainingHitPoint, !0), a.effector.checkStatusChange(), 2 == a.battle.user.resultType ? void(a.status.scene = "RESULT") : (a.effector.enemyTurnEnd(), _g.removeClass(b.getElementById("jsiEscape"), "is-btn-disable"), a.status.outcome = 0, void(a.status.index = -1))
	},
	renderStatusDetail: function() {
		var a = _g.diceBattle,
			b = document,
			c = b.getElementById("jsiStatusDetailArea");
		c.innerHTML = "", c.appendChild(_g.TmplUtil.render("tmplStatusDetail", a.battle))
	},
	resultWin: function() {
		var a = _g.diceBattle;
		document;
		_g.locationMask && _g.locationMask.showMask(), _g.location(a.battle.forward, {}, !0)
	},
	resultLose: function() {
		_g.diceBattle;
		_g.diceUseReviveItem.showDialog({
			rewards: _g.pageParams.stockRewards,
			diceEventPoint: _g.pageParams.diceEventPoint
		})
	},
	skipAnimation: function() {
		var a = _g.diceBattle;
		if (a.status.isSkippable) switch (a.status.isSkippable = !1, a.status.scene) {
			case "USER_TURN":
				_g.getPublisher().trigger(_g.diceBattleConsts.EVENT_ANIMATION, _g.diceBattleConsts.EVENT_USER_TURN_END);
				break;
			case "ENEMY_TURN":
				_g.getPublisher().trigger(_g.diceBattleConsts.EVENT_ANIMATION, _g.diceBattleConsts.EVENT_ENEMY_TURN_END)
		}
	},
	showEscapeDialog: function() {
		var a = _g.diceBattle;
		_g.commonMsg.showDialog({
			titleText: "確認",
			mainText: "ボスから逃げますか？",
			dialogType: "confirm",
			confirmBtnText: "逃げる",
			confirmCallback: a.tryEscape
		})
	},
	tryEscape: function() {
		var a = _g.diceBattle;
		document;
		a.status.isDisabled = !0, _g.hideDialog("commonMsg"), exportRoot.main.frame.curtainAnimation.gotoAndPlay("tfcCurtainAnimationStart"), setTimeout(function() {
			_g.pageParams.isEscapable ? (_g.locationMask && _g.locationMask.showMask(), _g.location(_g.pageParams.URL_TRY_ESCAPE)) : (_g.commonMsg.showDialog({
				titleText: "失敗",
				mainText: "この隊士からは逃げられない！",
				dialogType: "alert"
			}), a.status.isDisabled = !1)
		}, 1e3)
	},
	setLoadingText: function() {
		var a = _g.diceBattle,
			b = document,
			c = b.getElementById("jsiLoadingText");
		a.messageIndex = a.getMessageIndex(), c.innerHTML = "", c.appendChild(b.createTextNode(_g.pageParams.loadingMessages[a.messageIndex]))
	},
	getMessageIndex: function() {
		var a = _g.diceBattle,
			b = Math.floor(Math.random() * _g.pageParams.loadingMessages.length);
		return b != a.messageIndex ? b : a.getMessageIndex()
	}
}, document.addEventListener("DOMContentLoaded", function() {
	_g.diceBattle.init()
});